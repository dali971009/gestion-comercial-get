datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(uuid())
  number        Int      @default(autoincrement())
  createAt      DateTime @default(now())
  firstName     String
  lastName      String
  email         String   @unique
  password      String
  status        Int
  emailVerified Int
  address       String?
  phoneNumber   String?
  token         Token[]
}

model Token {
  id          String   @id @default(uuid())
  token       String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String
  expires     DateTime
  blacklisted Boolean
}

model ClientContact {
  id          String  @id @default(uuid())
  number      Int     @default(autoincrement())
  fullName    String
  ci          String
  position    String
  email       String?
  phone       String?
  isMainStaff Boolean @default(false)
  clientId    String
  client      Client  @relation(fields: [clientId], references: [id])
}

model Client {
  id                 String            @id @default(uuid())
  code               String
  officialName       String
  acronym            String?
  creationDate       DateTime?
  organism           String?
  osdeGroupUnion     String?
  company            String?
  codeREEUP          String?
  nit                String?
  commercialRegister String?
  address            String?
  municipality       String?
  province           String?
  authorizedPeople   ClientContact[]
  status             Int
  bankAccount        String?
  accountName        String?
  bank               String?
  serviceRequests    ServiceRequest[]
  commercialOffers   CommercialOffer[]
  contracts          Contract[]
}

model ServiceType {
  id                 String    @id @default(uuid())
  number             Int       @default(autoincrement())
  name               String
  description        String?
  serviceDescription String?
  services           Service[]
}

model Service {
  id                       String                   @id @default(uuid())
  number                   Int                      @default(autoincrement())
  typeId                   String
  description              String
  extraDescription         String?
  type                     ServiceType              @relation(fields: [typeId], references: [id])
  unit                     String?
  price                    Decimal?
  frequency                Int?
  commercialOffersServices CommercialOfferService[]
}

model ServiceRequest {
  id                 String            @id @default(uuid())
  number             Int
  applicationDate    DateTime
  requestingEntityId String
  requestingEntity   Client            @relation(fields: [requestingEntityId], references: [id])
  contactName        String
  contactPosition    String
  contactEmail       String?
  contactPhoneNumber String?
  scope              String
  status             Int
  commercialOffers   CommercialOffer[]
}

model CommercialOffer {
  id                  String                   @id @default(uuid())
  number              Int                      @default(autoincrement())
  serviceRequestId    String?
  serviceRequest      ServiceRequest?          @relation(fields: [serviceRequestId], references: [id])
  clientId            String
  client              Client                   @relation(fields: [clientId], references: [id])
  wayToPay            Int
  minimumRequirements String?
  services            CommercialOfferService[]
}

model CommercialOfferService {
  id                String          @id @default(uuid())
  number            Int             @default(autoincrement())
  serviceId         String
  service           Service         @relation(fields: [serviceId], references: [id])
  quantity          Int
  price             Decimal
  commercialOfferId String
  commercialOffer   CommercialOffer @relation(fields: [commercialOfferId], references: [id])
}

model Contract {
  id                       String               @id @default(uuid())
  number                   Int                  @default(autoincrement())
  createAt                 DateTime             @default(now())
  clientId                 String
  client                   Client               @relation(fields: [clientId], references: [id])
  identificationOfTheParts String
  object                   String
  value                    Decimal
  type                     Int
  includeCL                Boolean              @default(false)
  agreedAdvance            Decimal?
  wayToPay                 Int
  signatureDate            DateTime?
  validity                 DateTime?
  legalOpinion             String?
  agreement                String?
  observations             String?
  isPreform                Boolean
  oldVersions              ContractOldVersion[]
}

model ContractOldVersion {
  id                       String   @id @default(uuid())
  contractId               String
  contract                 Contract @relation(fields: [contractId], references: [id])
  createAt                 DateTime
  identificationOfTheParts String
  object                   String
  value                    Decimal
  type                     Int
  includeCL                Boolean
  agreedAdvance            Decimal
  wayToPay                 Int
  signatureDate            DateTime
  validity                 DateTime
  legalOpinion             String?
  agreement                String?
  observations             String?
}
