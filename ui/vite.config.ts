import { fileURLToPath, URL } from 'node:url'
import fs from 'node:fs';

import {defineConfig, UserConfig} from 'vite'
import vue from '@vitejs/plugin-vue'
import vuetify, { transformAssetUrls } from 'vite-plugin-vuetify';

// https://vitejs.dev/config/
export default defineConfig(async ({ command, mode }): Promise<UserConfig> => {
    const config: UserConfig = {
        // https://vitejs.dev/config/shared-options.html#base
        base: '/',
        // Resolver
        resolve: {
            // https://vitejs.dev/config/shared-options.html#resolve-alias
            alias: {
                '@': fileURLToPath(new URL('./src', import.meta.url)),
            },
        },
        plugins: [
            // Vue3
            vue({
                template: {
                    // https://github.com/vuetifyjs/vuetify-loader/tree/next/packages/vite-plugin#image-loading
                    transformAssetUrls,
                },
            }),
            // Vuetify Loader
            // https://github.com/vuetifyjs/vuetify-loader/tree/next/packages/vite-plugin#vite-plugin-vuetify
            vuetify({
                autoImport: true,
                // TODO uncomment styles: { configFile: './src/styles/_imports.scss' },
            }),
        ],
        /* TODO uncomment
        build: {
            // Build Target
            // https://vitejs.dev/config/build-options.html#build-target
            target: 'esnext',
            // Minify option
            // https://vitejs.dev/config/build-options.html#build-minify
            minify: 'esbuild',
            // Rollup Options
            // https://vitejs.dev/config/build-options.html#build-rollupoptions
            rollupOptions: {
                // @ts-ignore
                output: {
                    manualChunks: {
                        // Split external library from transpiled code.
                        vue: ['vue', 'vue-router', 'pinia', 'pinia-plugin-persistedstate'],
                        vuetify: ['vuetify', 'vuetify/components', 'vuetify/directives', 'webfontloader'],
                        materialdesignicons: ['@mdi/font/css/materialdesignicons.css'],
                    },
                },
            },
        }, */
        esbuild: {
            // Drop console when production build.
            drop: command === 'serve' ? [] : ['console'],
        },
    };

    // Write meta data.
    fs.writeFileSync(
        fileURLToPath(new URL('./src/Meta.ts', import.meta.url)),
        `import type MetaInterface from '@/interfaces/MetaInterface';

// This file is auto-generated by the build system.
const meta: MetaInterface = {
  version: '${require('./package.json').version}',
  date: '${new Date().toISOString()}',
};
export default meta;
`
    );

    return config;
});
